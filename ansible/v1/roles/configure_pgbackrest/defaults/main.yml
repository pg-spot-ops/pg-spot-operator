---
# Manifest
instance_name: hello_aws
region: eu-north-1
postgresql:
  version: 16
backup:
  type: pgbackrest
  wal_archiving_max_interval: 2min   # Postgres archive_timeout i.e. a typical "data-loss window" on instance termination
                               # when using local / volatile disks. Very short values (minimum is 1s) can bloat your
                               # backup archive and a streaming replication or WAL receiver setup could be a better fit.
# PS Below backup_* settings only affect repo1 - multi-repo is possible though via pgbackrest_global_settings
  retention_days: 3  # Snapshots according to the below schedule + WAL for PITR in that window
  schedule_full: "0 3 * * 1,3,5"
  schedule_diff: "0 3 * * 0,2,4,6"  # Comment out to disable differential backups
  encryption: false
  cipher_password:  # Supports Ansible vault encrypted strings
  cipher_password_file: ~/.pg-spot-operator/backup_cipher_password  # Plain text file accessible on the engine if don't want to use vault
  s3_key:  # If differs from aws.access_key_id
  s3_key_secret:  # If differs from aws.secret_access_key
  s3_key_file: ~/.aws/credentials_s3_key  # For dev
  s3_key_secret_file: ~/.aws/credentials_s3_key_secret  # For dev
  s3_bucket:  pgso  # If not exists we try to create
#  pgbackrest:
#    global_settings:
#    archive_push_overrides:
#    backup_overrides:
#    restore_overrides:

# Not exposed
postgres_cluster_name: "{{ instance_name | d('spot') | replace('-', '_') }}"  # Dashes don't work with pg_createcluster
stanza_name: "{{ instance_name | d('spot') }}"
postgres_archiving_settings:
  - "archive_command = 'pgbackrest --stanza={{ stanza_name }} archive-push %p'"
  - "archive_mode = on"
  - "archive_timeout = {{ backup.wal_archiving_max_interval | d('2min')}}"
