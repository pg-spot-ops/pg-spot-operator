---

- debug:
    var: vm.storage_type|d('network')

- name: Detect unmounted disks
  debug:
    var: item
  with_dict: "{{ ansible_devices }}"
  when:
    - not item.key.startswith('sr')
    - not item.key.startswith('dm')
    - not item.key.startswith('loop')

- name: Var to hold unmounted disks
  set_fact:
    devices_to_mount: []

- name: Register unmounted disks if any
  set_fact:
    devices_to_mount: '{{ devices_to_mount + [ item.key|replace("", "/dev/", 1) ] }}'
  with_dict: "{{ ansible_devices }}"
  when:
    - not item.value.partitions
    - not item.key.startswith('sr')
    - not item.key.startswith('dm')
    - not item.key.startswith('loop')
    - (vm.storage_type|d('network') == 'network' and 'EBS Controller' in item.value.host)
        or (vm.storage_type|d('network') == 'local' and not 'EBS Controller' in item.value.host)
    - not (vm.storage_type|d('network') == 'network' and 'nvme0' in item.key)

- name: Disks to mount
  debug:
    var: devices_to_mount

- name: Fail if no disks found to mount but vm.no_mount_disks set
  fail:
    msg: No data disks found to mount and vm.no_mount_disks not set
  when: not devices_to_mount and not vm.no_mount_disks|d(False)

- name: Ensure Postgres home exists
  ansible.builtin.file:
    path: "{{ mount_point }}"
    state: directory

- name: Update cache
  ansible.builtin.apt:
    cache_valid_time: 3600

- name: Install disk utils
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: no
  register: result
  until: result is success
  delay: 30
  retries: 3
  loop:
    - fdisk
    - lvm2

- block:

  - name: Ensure LVM PV and VG
    community.general.lvg:
       vg: pgdata-vg
       pvs: "{{ devices_to_mount|join(',') }}"

  - name: Logical LV linear 100%
    community.general.lvol:
      vg: pgdata-vg
      lv: pgdata-lv
      size: "100%FREE"
      shrink: false
    when: vm.stripes | d(0) <= 1

  - name: Logical LV with striping
    community.general.lvol:
      vg: pgdata-vg
      lv: pgdata-lv
      size: "100%FREE"
      shrink: false
      opts: "-i {{ vm.stripes | d( devices_to_mount | length ) }} -I {{ vm.stripe_size_kb | d(64) }}"
    when: vm.stripes | d(0) > 1

  - name: Format the volume
    community.general.filesystem:
     fstype: "{{ fs_type }}"
     dev: /dev/pgdata-vg/pgdata-lv
    ignore_errors: true  # will fail if already mounted

  - name: Mount the volume permanently
    ansible.posix.mount:
      path: "{{ mount_point }}"
      src: /dev/pgdata-vg/pgdata-lv
      opts: "{{ fs_mount_opts }}"
      fstype: "{{ fs_type }}"
      state: mounted

  when: devices_to_mount | length > 0
