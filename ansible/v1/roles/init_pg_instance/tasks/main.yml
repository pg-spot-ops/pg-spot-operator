---
- name: Check cluster conf initialized
  ansible.builtin.stat:
    path: "{{ postgres_config_directory }}/postgresql.conf"
  register: cluster_conf_exists

- name: Check cluster datadir initialized
  ansible.builtin.stat:
    path: "{{ postgres_data_directory }}/global/pg_control"
  register: cluster_datadir_exists

- name: Create cluster - when nothing exists
  ansible.builtin.command: >
    pg_createcluster {{ postgres_version }} {{ postgres_cluster_name }}
    -p 5432 -- {% for opt in pg.initdb_opts | d(default_initdb_opts) %}{{ opt }} {% endfor %}
  when: not cluster_conf_exists.stat.exists and not cluster_datadir_exists.stat.exists
  notify:
    - "init_pg_instance : Restart postgres"

- block:  # Handle case when datadir exists but no config, i.e. mounting an existing EBS data volume
  - name: Clean cluster temp dir path if exist
    ansible.builtin.file:
      state: absent
      path: /tmp/pg_dummy_cluster

  - name: Create cluster in temp dir
    ansible.builtin.command: >
      pg_createcluster {{ postgres_version }} {{ postgres_cluster_name }} -d /tmp/pg_dummy_cluster
      -p 5432 -- {% for opt in pg.initdb_opts | d(default_initdb_opts) %}{{ opt }} {% endfor %}

  - name: Replace data_directory in config
    ansible.builtin.replace:
      path: "{{ postgres_config_directory }}/postgresql.conf"
      regexp: "^data_directory.*"
      replace: "data_directory = '{{ postgres_data_directory }}'"

  - name: Clean cluster temp dir path if exist
    ansible.builtin.file:
      state: absent
      path: /tmp/pg_dummy_cluster

  when: not cluster_conf_exists.stat.exists and cluster_datadir_exists.stat.exists

- name: Ensure Postgres postgres_version owned by postgres user
  file: dest="/var/lib/postgresql/{{postgres_version}}" owner=postgres group=postgres
  when: not cluster_conf_exists.stat.exists

- name: Set up postgresql.conf in conf.d
  ansible.builtin.template:
    src: "pgspotops.conf.j2"
    dest: "{{ postgres_config_directory }}/conf.d/pgspotops.conf"
    owner: postgres
    group: postgres
    mode: "655"
  notify:
    - "init_pg_instance : Reload postgres"

- name: flush_handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure postgres started
  ansible.builtin.service: "name=postgresql@{{ postgres_version }}-{{ postgres_cluster_name }} state=started"

- name: Check if Postgres restart required
  become: true
  become_user: postgres
  ansible.builtin.command:
    "psql -p 5432 -XAtc \"select bool_or(pending_restart) from pg_settings;\""
  register: pending_restart
  changed_when: pending_restart.stdout == 't'

- name: Restart postgres if necessary
  service: name=postgresql state=restarted
  when: pending_restart.stdout == 't'

- name: Add a test table to quickly see if restore worked
  become: true
  become_user: postgres
  ansible.builtin.command: "psql -c 'create table dummy as select now() created_on'"
  when:
    - add_dummy_data is truthy
    - not cluster_datadir_exists.stat.exists

- name: Extra setup - users / DBs. Not needed when restoring from a backup
  ansible.builtin.include_tasks: optional_user_db_setup.yml
